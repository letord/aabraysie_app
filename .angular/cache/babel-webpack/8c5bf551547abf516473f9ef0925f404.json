{"ast":null,"code":"import _asyncToGenerator from \"/Users/baptiste/Desktop/DILL_XP/app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.connexionURL = 'http://localhost:8080/utilisateurs/connexion';\n    this.connected = false;\n    this.user = {\n      idEquipe: 0,\n      nom: '',\n      prenom: '',\n      connected: false\n    };\n  }\n\n  connexion(login, password) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      let HttpOptions = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json' //'Access-Control-Allow-Origin':'**'\n\n        })\n      };\n      var logs = {\n        login: login,\n        password: password\n      };\n      yield _this.http.post(_this.connexionURL, logs, HttpOptions).toPromise().then(response => {\n        let user = {};\n        user.idEquipe = response.idEquipe;\n        user.nom = response.nom;\n        user.prenom = response.prenom;\n        _this.user = user;\n        _this.connected = true;\n      });\n      return _this.connected;\n    })();\n  }\n\n  getStatus() {\n    return this.connected;\n  }\n\n  setConnected(value) {\n    this.connected = value;\n  }\n\n}\n\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n};\n\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["/Users/baptiste/Desktop/DILL_XP/app/src/app/services/auth.service.ts"],"names":["HttpHeaders","i0","i1","AuthService","constructor","http","connexionURL","connected","user","idEquipe","nom","prenom","connexion","login","password","HttpOptions","headers","logs","post","toPromise","then","response","getStatus","setConnected","value","ɵfac","AuthService_Factory","t","ɵɵinject","HttpClient","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":";AAAA,SAASA,WAAT,QAA4B,sBAA5B;AACA,OAAO,KAAKC,EAAZ,MAAoB,eAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,sBAApB;AACA,OAAO,MAAMC,WAAN,CAAkB;AACrBC,EAAAA,WAAW,CAACC,IAAD,EAAO;AACd,SAAKA,IAAL,GAAYA,IAAZ;AACA,SAAKC,YAAL,GAAoB,8CAApB;AACA,SAAKC,SAAL,GAAiB,KAAjB;AACA,SAAKC,IAAL,GAAY;AAAEC,MAAAA,QAAQ,EAAE,CAAZ;AAAeC,MAAAA,GAAG,EAAE,EAApB;AAAwBC,MAAAA,MAAM,EAAE,EAAhC;AAAoCJ,MAAAA,SAAS,EAAE;AAA/C,KAAZ;AACH;;AACKK,EAAAA,SAAS,CAACC,KAAD,EAAQC,QAAR,EAAkB;AAAA;;AAAA;AAC7B,UAAIC,WAAW,GAAG;AAAEC,QAAAA,OAAO,EAAE,IAAIhB,WAAJ,CAAgB;AACrC,0BAAgB,kBADqB,CAErC;;AAFqC,SAAhB;AAAX,OAAlB;AAIA,UAAIiB,IAAI,GAAG;AACPJ,QAAAA,KAAK,EAAEA,KADA;AAEPC,QAAAA,QAAQ,EAAEA;AAFH,OAAX;AAIA,YAAM,KAAI,CAACT,IAAL,CAAUa,IAAV,CAAe,KAAI,CAACZ,YAApB,EAAkCW,IAAlC,EAAwCF,WAAxC,EAAqDI,SAArD,GACDC,IADC,CACIC,QAAQ,IAAI;AAClB,YAAIb,IAAI,GAAG,EAAX;AACAA,QAAAA,IAAI,CAACC,QAAL,GAAgBY,QAAQ,CAACZ,QAAzB;AACAD,QAAAA,IAAI,CAACE,GAAL,GAAWW,QAAQ,CAACX,GAApB;AACAF,QAAAA,IAAI,CAACG,MAAL,GAAcU,QAAQ,CAACV,MAAvB;AACA,QAAA,KAAI,CAACH,IAAL,GAAYA,IAAZ;AACA,QAAA,KAAI,CAACD,SAAL,GAAiB,IAAjB;AACH,OARK,CAAN;AASA,aAAO,KAAI,CAACA,SAAZ;AAlB6B;AAmBhC;;AACDe,EAAAA,SAAS,GAAG;AACR,WAAO,KAAKf,SAAZ;AACH;;AACDgB,EAAAA,YAAY,CAACC,KAAD,EAAQ;AAChB,SAAKjB,SAAL,GAAiBiB,KAAjB;AACH;;AAhCoB;;AAkCzBrB,WAAW,CAACsB,IAAZ,GAAmB,SAASC,mBAAT,CAA6BC,CAA7B,EAAgC;AAAE,SAAO,KAAKA,CAAC,IAAIxB,WAAV,EAAuBF,EAAE,CAAC2B,QAAH,CAAY1B,EAAE,CAAC2B,UAAf,CAAvB,CAAP;AAA4D,CAAjH;;AACA1B,WAAW,CAAC2B,KAAZ,GAAoB,aAAc7B,EAAE,CAAC8B,kBAAH,CAAsB;AAAEC,EAAAA,KAAK,EAAE7B,WAAT;AAAsB8B,EAAAA,OAAO,EAAE9B,WAAW,CAACsB,IAA3C;AAAiDS,EAAAA,UAAU,EAAE;AAA7D,CAAtB,CAAlC","sourcesContent":["import { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n    constructor(http) {\n        this.http = http;\n        this.connexionURL = 'http://localhost:8080/utilisateurs/connexion';\n        this.connected = false;\n        this.user = { idEquipe: 0, nom: '', prenom: '', connected: false };\n    }\n    async connexion(login, password) {\n        let HttpOptions = { headers: new HttpHeaders({\n                'Content-Type': 'application/json',\n                //'Access-Control-Allow-Origin':'**'\n            }) };\n        var logs = {\n            login: login,\n            password: password\n        };\n        await this.http.post(this.connexionURL, logs, HttpOptions).toPromise()\n            .then(response => {\n            let user = {};\n            user.idEquipe = response.idEquipe;\n            user.nom = response.nom;\n            user.prenom = response.prenom;\n            this.user = user;\n            this.connected = true;\n        });\n        return this.connected;\n    }\n    getStatus() {\n        return this.connected;\n    }\n    setConnected(value) {\n        this.connected = value;\n    }\n}\nAuthService.ɵfac = function AuthService_Factory(t) { return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient)); };\nAuthService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: AuthService, factory: AuthService.ɵfac, providedIn: 'root' });\n"]},"metadata":{},"sourceType":"module"}